openapi: 3.0.0
info:
  title: Vulnerable REST API
  version: 1.0.0
  description: A REST API with intentionally vulnerable endpoints for security testing

servers:
  - url: http://localhost:3000
    description: Local development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          format: objectId
        name:
          type: string
        email:
          type: string
          format: email
        username:
          type: string
        role:
          type: string
          enum: [user, admin]
        website:
          type: string
        credit:
          type: number
        password:
          type: string
          writeOnly: true

    Book:
      type: object
      properties:
        _id:
          type: string
          format: objectId
        title:
          type: string
        category:
          type: string
          format: objectId
        publishedDate:
          type: string
          format: date
        author:
          type: string
          format: objectId

    Token:
      type: object
      properties:
        userId:
          type: string
          format: objectId
        token:
          type: string
        createdAt:
          type: string
          format: date-time

paths:
  /users:
    get:
      summary: Get all users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/{name}:
    get:
      summary: Get user by username
      security:
        - bearerAuth: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/{id}:
    put:
      summary: Update user
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: objectId
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                url:
                  type: string
                newPass:
                  type: string
      responses:
        '200':
          description: User updated successfully
    delete:
      summary: Delete user
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: objectId
      responses:
        '200':
          description: User deleted successfully

  /users/otp:
    post:
      summary: Request OTP for password reset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
      responses:
        '200':
          description: OTP sent successfully

  /users/verify:
    post:
      summary: Verify OTP and reset password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    userId:
                      type: string
                    token:
                      type: string
                password:
                  type: object
                  properties:
                    value:
                      type: string
      responses:
        '200':
          description: Password reset successful

  /books:
    get:
      summary: Get all books
      responses:
        '200':
          description: List of books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    post:
      summary: Create a new book
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '201':
          description: Book created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'

  /books/{id}:
    get:
      summary: Get book by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: objectId
      responses:
        '200':
          description: Book details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
    put:
      summary: Update book
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: objectId
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '200':
          description: Book updated successfully
    delete:
      summary: Delete book
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: objectId
      responses:
        '200':
          description: Book deleted successfully 