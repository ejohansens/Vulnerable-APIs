openapi: 3.0.0
info:
  description: A privacy-first, lightweight note-taking service.
  title: memos API
  contact:
    name: API Support
    url: https://github.com/orgs/usememos/discussions
  license:
    name: MIT License
    url: https://github.com/usememos/memos/blob/main/LICENSE
  version: '1.0'
paths:
  /api/v1/auth/signin:
    post:
      tags:
        - auth
      summary: Sign-in to memos.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1.SignIn'
        description: Sign-in object
        required: true
      responses:
        '200':
          description: User information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/store.User'
        '400':
          description: Malformatted signin request
        '401':
          description: >-
            Password login is deactivated | Incorrect login credentials, please
            try again
        '403':
          description: User has been archived with username %s
        '500':
          description: >-
            Failed to find system setting | Failed to unmarshal system setting |
            Incorrect login credentials, please try again | Failed to generate
            tokens | Failed to create activity
  /api/v1/auth/signin/sso:
    post:
      tags:
        - auth
      summary: Sign-in to memos using SSO.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1.SSOSignIn'
        description: SSO sign-in object
        required: true
      responses:
        '200':
          description: User information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/store.User'
        '400':
          description: Malformatted signin request
        '401':
          description: Access denied, identifier does not match the filter.
        '403':
          description: User has been archived with username {username}
        '404':
          description: Identity provider not found
        '500':
          description: >-
            Failed to find identity provider | Failed to create identity
            provider instance | Failed to exchange token | Failed to get user
            info | Failed to compile identifier filter | Incorrect login
            credentials, please try again | Failed to generate random password |
            Failed to generate password hash | Failed to create user | Failed to
            generate tokens | Failed to create activity
  /api/v1/auth/signout:
    post:
      tags:
        - auth
      summary: Sign-out from memos.
      responses:
        '200':
          description: Sign-out success
          content:
            application/json:
              schema:
                type: boolean
  /api/v1/auth/signup:
    post:
      tags:
        - auth
      summary: Sign-up to memos.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1.SignUp'
        description: Sign-up object
        required: true
      responses:
        '200':
          description: User information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/store.User'
        '400':
          description: Malformatted signup request | Failed to find users
        '401':
          description: signup is disabled
        '403':
          description: Forbidden
        '404':
          description: Not found
        '500':
          description: >-
            Failed to find system setting | Failed to unmarshal system setting
            allow signup | Failed to generate password hash | Failed to create
            user | Failed to generate tokens | Failed to create activity
  /api/v1/idp:
    get:
      description: '*clientSecret is only available for host user'
      tags:
        - idp
      summary: Get a list of identity providers
      responses:
        '200':
          description: List of available identity providers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.IdentityProvider'
        '500':
          description: Failed to find identity provider list | Failed to find user
    post:
      tags:
        - idp
      summary: Create Identity Provider
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1.CreateIdentityProviderRequest'
        description: Identity provider information
        required: true
      responses:
        '200':
          description: Identity provider information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/store.IdentityProvider'
        '400':
          description: Malformatted post identity provider request
        '401':
          description: Missing user in session | Unauthorized
        '500':
          description: Failed to find user | Failed to create identity provider
  /api/v1/idp/{idpId}:
    get:
      tags:
        - idp
      summary: Get an identity provider by ID
      parameters:
        - description: Identity provider ID
          name: idpId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Requested identity provider
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/store.IdentityProvider'
        '400':
          description: 'ID is not a number: %s'
        '401':
          description: Missing user in session | Unauthorized
        '404':
          description: Identity provider not found
        '500':
          description: Failed to find identity provider list | Failed to find user
    delete:
      tags:
        - idp
      summary: Delete an identity provider by ID
      parameters:
        - description: Identity Provider ID
          name: idpId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Identity Provider deleted
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: >-
            ID is not a number: %s | Malformatted patch identity provider
            request
        '401':
          description: Missing user in session | Unauthorized
        '500':
          description: Failed to find user | Failed to patch identity provider
    patch:
      tags:
        - idp
      summary: Update an identity provider by ID
      parameters:
        - description: Identity Provider ID
          name: idpId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1.UpdateIdentityProviderRequest'
        description: Patched identity provider information
        required: true
      responses:
        '200':
          description: Patched identity provider
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/store.IdentityProvider'
        '400':
          description: >-
            ID is not a number: %s | Malformatted patch identity provider
            request
        '401':
          description: Missing user in session | Unauthorized
        '500':
          description: Failed to find user | Failed to patch identity provider
  /api/v1/memo:
    get:
      tags:
        - memo
      summary: Get a list of memos matching optional filters
      operationId: getMemos
      parameters:
        - description: Creator ID
          name: creatorId
          in: query
          schema:
            type: integer
        - description: Creator username
          name: creatorUsername
          in: query
          schema:
            type: string
        - description: Row status
          name: rowStatus
          in: query
          schema:
            type: string
            enum:
              - NORMAL
              - ARCHIVED
        - description: Pinned
          name: pinned
          in: query
          schema:
            type: boolean
        - description: 'Search for tag. Do not append #'
          name: tag
          in: query
          schema:
            type: string
        - description: Search for content
          name: content
          in: query
          schema:
            type: string
        - description: Limit
          name: limit
          in: query
          schema:
            type: integer
        - description: Offset
          name: offset
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: Memo list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/store.Memo'
          links:
            getMemo:
              operationId: patchMemo
              parameters:
                memoId: '$response.body#/id'
        '400':
          description: Missing user to find memo
        '500':
          description: >-
            Failed to get memo display with updated ts setting value | Failed to
            fetch memo list | Failed to compose memo response
    post:
      description: |-
        Visibility can be PUBLIC, PROTECTED or PRIVATE
        *You should omit fields to use their default values
      tags:
        - memo
      operationId: createMemo
      summary: Create a memo
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1.CreateMemoRequest'
        description: Request object.
        required: true
      responses:
        '200':
          description: Stored memo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/store.Memo'
          links:
            getMemo:
              operationId: patchMemo
              parameters:
                memoId: '$response.body#/id'
        '400':
          description: Malformatted post memo request | Content size overflow, up to 1MB
        '401':
          description: Missing user in session
        '404':
          description: 'User not found | Memo not found: %d'
        '500':
          description: >-
            Failed to find user setting | Failed to unmarshal user setting value
            | Failed to find system setting | Failed to unmarshal system setting
            | Failed to find user | Failed to create memo | Failed to create
            activity | Failed to upsert memo resource | Failed to upsert memo
            relation | Failed to compose memo | Failed to compose memo response
  /api/v1/memo/all:
    get:
      description: |-
        This should also list protected memos if the user is logged in
        Authentication is optional
      tags:
        - memo
      summary: Get a list of public memos matching optional filters
      parameters:
        - description: Limit
          name: limit
          in: query
          schema:
            type: integer
        - description: Offset
          name: offset
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: Memo list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/store.Memo'
        '500':
          description: >-
            Failed to get memo display with updated ts setting value | Failed to
            fetch all memo list | Failed to compose memo response
  /api/v1/memo/stats:
    get:
      description: Used to generate the heatmap
      tags:
        - memo
      summary: Get memo stats by creator ID or username
      parameters:
        - description: Creator ID
          name: creatorId
          in: query
          schema:
            type: integer
        - description: Creator username
          name: creatorUsername
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Memo createdTs list
          content:
            application/json:
              schema:
                type: array
                items:
                  type: integer
        '400':
          description: Missing user id to find memo
        '500':
          description: >-
            Failed to get memo display with updated ts setting value | Failed to
            find memo list | Failed to compose memo response
  /api/v1/memo/{memoId}:
    get:
      tags:
        - memo
      summary: Get memo by ID
      operationId: getMemoByID
      parameters:
        - description: Memo ID
          name: memoId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Memo list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/store.Memo'
        '400':
          description: 'ID is not a number: %s'
        '401':
          description: Missing user in session
        '403':
          description: >-
            this memo is private only | this memo is protected, missing user in
            session
        '404':
          description: 'Memo not found: %d'
        '500':
          description: 'Failed to find memo by ID: %v | Failed to compose memo response'
    delete:
      tags:
        - memo
      summary: Delete memo by ID
      parameters:
        - description: Memo ID to delete
          name: memoId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Memo deleted
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: 'ID is not a number: %s'
        '401':
          description: Missing user in session | Unauthorized
        '404':
          description: 'Memo not found: %d'
        '500':
          description: 'Failed to find memo | Failed to delete memo ID: %v'
    patch:
      description: |-
        Visibility can be PUBLIC, PROTECTED or PRIVATE
        *You should omit fields to use their default values
      tags:
        - memo
      summary: Update a memo
      operationId: patchMemo
      parameters:
        - description: ID of memo to update
          name: memoId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1.PatchMemoRequest'
        description: Patched object.
        required: true
      responses:
        '200':
          description: Stored memo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/store.Memo'
        '400':
          description: >-
            ID is not a number: %s | Malformatted patch memo request | Content
            size overflow, up to 1MB
        '401':
          description: Missing user in session | Unauthorized
        '404':
          description: 'Memo not found: %d'
        '500':
          description: >-
            Failed to find memo | Failed to patch memo | Failed to upsert memo
            resource | Failed to delete memo resource | Failed to compose memo
            response
  /api/v1/memo/{memoId}/organizer:
    post:
      tags:
        - memo-organizer
      summary: Organize memo (pin/unpin)
      parameters:
        - description: ID of memo to organize
          name: memoId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1.UpsertMemoOrganizerRequest'
        description: Memo organizer object
        required: true
      responses:
        '200':
          description: Memo information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/store.Memo'
        '400':
          description: 'ID is not a number: %s | Malformatted post memo organizer request'
        '401':
          description: Missing user in session | Unauthorized
        '404':
          description: 'Memo not found: %v'
        '500':
          description: >-
            Failed to find memo | Failed to upsert memo organizer | Failed to
            find memo by ID: %v | Failed to compose memo response
  /api/v1/memo/{memoId}/relation:
    get:
      tags:
        - memo-relation
      summary: Get a list of Memo Relations
      parameters:
        - description: ID of memo to find relations
          name: memoId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Memo relation information list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/store.MemoRelation'
        '400':
          description: 'ID is not a number: %s'
        '500':
          description: Failed to list memo relations
    post:
      description: Create a relation between two memos
      tags:
        - memo-relation
      summary: Create Memo Relation
      parameters:
        - description: ID of memo to relate
          name: memoId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1.UpsertMemoRelationRequest'
        description: Memo relation object
        required: true
      responses:
        '200':
          description: Memo relation information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/store.MemoRelation'
        '400':
          description: 'ID is not a number: %s | Malformatted post memo relation request'
        '500':
          description: Failed to upsert memo relation
  /api/v1/memo/{memoId}/relation/{relatedMemoId}/type/{relationType}:
    delete:
      description: Removes a relation between two memos
      tags:
        - memo-relation
      summary: Delete a Memo Relation
      parameters:
        - description: ID of memo to find relations
          name: memoId
          in: path
          required: true
          schema:
            type: integer
        - description: ID of memo to remove relation to
          name: relatedMemoId
          in: path
          required: true
          schema:
            type: integer
        - description: Type of relation to remove
          name: relationType
          in: path
          required: true
          schema:
            type: string
            enum:
              - REFERENCE
              - ADDITIONAL
      responses:
        '200':
          description: Memo relation deleted
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: 'Memo ID is not a number: %s | Related memo ID is not a number: %s'
        '500':
          description: Failed to delete memo relation
  /api/v1/ping:
    get:
      tags:
        - system
      summary: Ping the system
      responses:
        '200':
          description: If succeed to ping the system
          content:
            application/json:
              schema:
                type: boolean
  /api/v1/resource:
    get:
      tags:
        - resource
      summary: Get a list of resources
      parameters:
        - description: Limit
          name: limit
          in: query
          schema:
            type: integer
        - description: Offset
          name: offset
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: Resource list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/store.Resource'
        '401':
          description: Missing user in session
        '500':
          description: Failed to fetch resource list
    post:
      tags:
        - resource
      summary: Create resource
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1.CreateResourceRequest'
        description: Request object.
        required: true
      responses:
        '200':
          description: Created resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/store.Resource'
        '400':
          description: >-
            Malformatted post resource request | Invalid external link | Invalid
            external link scheme | Failed to request %s | Failed to read %s |
            Failed to read mime from %s
        '401':
          description: Missing user in session
        '500':
          description: >-
            Failed to save resource | Failed to create resource | Failed to
            create activity
  /api/v1/resource/blob:
    post:
      tags:
        - resource
      summary: Upload resource
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  description: File to upload
                  type: string
                  format: binary
              required:
                - file
        required: true
      responses:
        '200':
          description: Created resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/store.Resource'
        '400':
          description: >-
            Upload file not found | File size exceeds allowed limit of %d MiB |
            Failed to parse upload data
        '401':
          description: Missing user in session
        '500':
          description: >-
            Failed to get uploading file | Failed to open file | Failed to save
            resource | Failed to create resource | Failed to create activity
  /api/v1/resource/{resourceId}:
    delete:
      tags:
        - resource
      summary: Delete a resource
      parameters:
        - description: Resource ID
          name: resourceId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Resource deleted
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: 'ID is not a number: %s'
        '401':
          description: Missing user in session
        '404':
          description: 'Resource not found: %d'
        '500':
          description: Failed to find resource | Failed to delete resource
    patch:
      tags:
        - resource
      summary: Update a resource
      parameters:
        - description: Resource ID
          name: resourceId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1.UpdateResourceRequest'
        description: Patch resource request
        required: true
      responses:
        '200':
          description: Updated resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/store.Resource'
        '400':
          description: 'ID is not a number: %s | Malformatted patch resource request'
        '401':
          description: Missing user in session | Unauthorized
        '404':
          description: 'Resource not found: %d'
        '500':
          description: Failed to find resource | Failed to patch resource
  /api/v1/status:
    get:
      tags:
        - system
      summary: Get system GetSystemStatus
      responses:
        '200':
          description: System GetSystemStatus
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1.SystemStatus'
        '401':
          description: Missing user in session | Unauthorized
        '500':
          description: >-
            Failed to find host user | Failed to find system setting list |
            Failed to unmarshal system setting customized profile value
  /api/v1/storage:
    get:
      tags:
        - storage
      summary: Get a list of storages
      responses:
        '200':
          description: List of storages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/store.Storage'
        '401':
          description: Missing user in session | Unauthorized
        '500':
          description: Failed to find user | Failed to convert storage
    post:
      tags:
        - storage
      summary: Create storage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1.CreateStorageRequest'
        description: Request object.
        required: true
      responses:
        '200':
          description: Created storage
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/store.Storage'
        '400':
          description: Malformatted post storage request
        '401':
          description: Missing user in session
        '500':
          description: >-
            Failed to find user | Failed to create storage | Failed to convert
            storage
  /api/v1/storage/{storageId}:
    delete:
      tags:
        - storage
      summary: Delete a storage
      parameters:
        - description: Storage ID
          name: storageId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Storage deleted
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: 'ID is not a number: %s | Storage service %d is using'
        '401':
          description: Missing user in session | Unauthorized
        '500':
          description: >-
            Failed to find user | Failed to find storage | Failed to unmarshal
            storage service id | Failed to delete storage
    patch:
      tags:
        - storage
      summary: Update a storage
      parameters:
        - description: Storage ID
          name: storageId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1.UpdateStorageRequest'
        description: Patch request
        required: true
      responses:
        '200':
          description: Updated resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/store.Storage'
        '400':
          description: >-
            ID is not a number: %s | Malformatted patch storage request |
            Malformatted post storage request
        '401':
          description: Missing user in session | Unauthorized
        '500':
          description: >-
            Failed to find user | Failed to patch storage | Failed to convert
            storage
  /api/v1/system/setting:
    get:
      tags:
        - system-setting
      summary: Get a list of system settings
      responses:
        '200':
          description: System setting list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.SystemSetting'
        '401':
          description: Missing user in session | Unauthorized
        '500':
          description: Failed to find user | Failed to find system setting list
    post:
      tags:
        - system-setting
      summary: Create system setting
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1.UpsertSystemSettingRequest'
        description: Request object.
        required: true
      responses:
        '200':
          description: Created system setting
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/store.SystemSetting'
        '400':
          description: Malformatted post system setting request | invalid system setting
        '401':
          description: Missing user in session | Unauthorized
        '403':
          description: Cannot disable passwords if no SSO identity provider is configured.
        '500':
          description: Failed to find user | Failed to upsert system setting
  /api/v1/system/vacuum:
    post:
      tags:
        - system
      summary: Vacuum the database
      responses:
        '200':
          description: Database vacuumed
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Missing user in session | Unauthorized
        '500':
          description: Failed to find user | Failed to ExecVacuum database
  /api/v1/tag:
    get:
      tags:
        - tag
      summary: Get a list of tags
      responses:
        '200':
          description: Tag list
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '400':
          description: Missing user id to find tag
        '500':
          description: Failed to find tag list
    post:
      tags:
        - tag
      summary: Create a tag
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1.UpsertTagRequest'
        description: Request object.
        required: true
      responses:
        '200':
          description: Created tag name
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Malformatted post tag request | Tag name shouldn't be empty
        '401':
          description: Missing user in session
        '500':
          description: Failed to upsert tag | Failed to create activity
  /api/v1/tag/delete:
    post:
      tags:
        - tag
      summary: Delete a tag
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1.DeleteTagRequest'
        description: Request object.
        required: true
      responses:
        '200':
          description: Tag deleted
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: Malformatted post tag request | Tag name shouldn't be empty
        '401':
          description: Missing user in session
        '500':
          description: 'Failed to delete tag name: %v'
  /api/v1/tag/suggestion:
    get:
      tags:
        - tag
      summary: Get a list of tags suggested from other memos contents
      responses:
        '200':
          description: Tag list
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '400':
          description: Missing user session
        '500':
          description: Failed to find memo list | Failed to find tag list
  /api/v1/user:
    get:
      tags:
        - user
      summary: Get a list of users
      responses:
        '200':
          description: User list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/store.User'
        '500':
          description: Failed to fetch user list
    post:
      tags:
        - user
      summary: Create a user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1.CreateUserRequest'
        description: Request object
        required: true
      responses:
        '200':
          description: Created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/store.User'
        '400':
          description: Malformatted post user request | Invalid user create format
        '401':
          description: Missing auth session | Unauthorized to create user
        '403':
          description: Could not create host user
        '500':
          description: >-
            Failed to find user by id | Failed to generate password hash |
            Failed to create user | Failed to create activity
  /api/v1/user/me:
    get:
      tags:
        - user
      summary: Get current user
      responses:
        '200':
          description: Current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/store.User'
        '401':
          description: Missing auth session
        '500':
          description: Failed to find user | Failed to find userSettingList
  /api/v1/user/name/{username}:
    get:
      tags:
        - user
      summary: Get user by username
      parameters:
        - description: Username
          name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Requested user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/store.User'
        '404':
          description: User not found
        '500':
          description: Failed to find user
  /api/v1/user/setting:
    post:
      tags:
        - user-setting
      summary: Upsert user setting
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1.UpsertUserSettingRequest'
        description: Request object.
        required: true
      responses:
        '200':
          description: Created user setting
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/github_com_usememos_memos_store.UserSetting
        '400':
          description: >-
            Malformatted post user setting upsert request | Invalid user setting
            format
        '401':
          description: Missing auth session
        '500':
          description: Failed to upsert user setting
  /api/v1/user/{id}:
    get:
      tags:
        - user
      summary: Get user by id
      parameters:
        - description: User ID
          name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Requested user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/store.User'
        '400':
          description: Malformatted user id
        '404':
          description: User not found
        '500':
          description: Failed to find user
    delete:
      tags:
        - user
      summary: Delete a user
      parameters:
        - description: User ID
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User deleted
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: 'ID is not a number: %s | Current session user not found with ID: %d'
        '401':
          description: Missing user in session
        '403':
          description: Unauthorized to delete user
        '500':
          description: Failed to find user | Failed to delete user
    patch:
      tags:
        - user
      summary: Update a user
      parameters:
        - description: User ID
          name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1.UpdateUserRequest'
        description: Patch request
        required: true
      responses:
        '200':
          description: Updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/store.User'
        '400':
          description: >-
            ID is not a number: %s | Current session user not found with ID: %d
            | Malformatted patch user request | Invalid update user request
        '401':
          description: Missing user in session
        '403':
          description: Unauthorized to update user
        '500':
          description: >-
            Failed to find user | Failed to generate password hash | Failed to
            patch user | Failed to find userSettingList
  /explore/rss.xml:
    get:
      tags:
        - rss
      summary: Get RSS
      responses:
        '200':
          description: RSS
        '500':
          description: >-
            Failed to get system customized profile | Failed to find memo list |
            Failed to generate rss
  /o/get/GetImage:
    get:
      tags:
        - get
      summary: Get GetImage from URL
      parameters:
        - description: Image url
          name: url
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Image
        '400':
          description: 'Missing GetImage url | Wrong url | Failed to get GetImage url: %s'
        '500':
          description: Failed to write GetImage blob
  /o/get/GetWebsiteMetadata:
    get:
      tags:
        - get
      summary: Get website metadata
      parameters:
        - description: Website URL
          name: url
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Extracted metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getter.HTMLMeta'
        '400':
          description: Missing website url | Wrong url
        '406':
          description: 'Failed to get website meta with url: %s'
  /o/r/{resourceId}:
    get:
      description: '*Swagger UI may have problems displaying other file types than images'
      tags:
        - resource
      summary: Stream a resource
      parameters:
        - description: Resource ID
          name: resourceId
          in: path
          required: true
          schema:
            type: integer
        - description: Thumbnail
          name: thumbnail
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: Requested resource
        '400':
          description: 'ID is not a number: %s | Failed to get resource visibility'
        '401':
          description: Resource visibility not match
        '404':
          description: 'Resource not found: %d'
        '500':
          description: >-
            Failed to find resource by ID: %v | Failed to open the local
            resource: %s | Failed to read the local resource: %s
  /u/{id}/rss.xml:
    get:
      tags:
        - rss
      summary: Get RSS for a user
      parameters:
        - description: User ID
          name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: RSS
        '400':
          description: User id is not a number
        '500':
          description: >-
            Failed to get system customized profile | Failed to find memo list |
            Failed to generate rss
externalDocs:
  description: Find out more about Memos.
  url: https://usememos.com/
components:
  schemas:
    getter.HTMLMeta:
      type: object
      properties:
        description:
          type: string
        image:
          type: string
        title:
          type: string
    github_com_usememos_memos_store.UserSetting:
      type: object
      properties:
        key:
          type: string
        userID:
          type: integer
        value:
          type: string
    profile.Profile:
      type: object
      properties:
        mode:
          description: Mode can be "prod" or "dev" or "demo"
          type: string
        version:
          description: Version is the current version of server
          type: string
    store.FieldMapping:
      type: object
      properties:
        displayName:
          type: string
        email:
          type: string
        identifier:
          type: string
    store.IdentityProvider:
      type: object
      properties:
        config:
          $ref: '#/components/schemas/store.IdentityProviderConfig'
        id:
          type: integer
        identifierFilter:
          type: string
        name:
          type: string
        type:
          $ref: '#/components/schemas/store.IdentityProviderType'
    store.IdentityProviderConfig:
      type: object
      properties:
        oauth2Config:
          $ref: '#/components/schemas/store.IdentityProviderOAuth2Config'
    store.IdentityProviderOAuth2Config:
      type: object
      properties:
        authUrl:
          type: string
        clientId:
          type: string
        clientSecret:
          type: string
        fieldMapping:
          $ref: '#/components/schemas/store.FieldMapping'
        scopes:
          type: array
          items:
            type: string
        tokenUrl:
          type: string
        userInfoUrl:
          type: string
    store.IdentityProviderType:
      type: string
      enum:
        - OAUTH2
      x-enum-varnames:
        - IdentityProviderOAuth2Type
    store.Memo:
      type: object
      properties:
        content:
          description: Domain specific fields
          type: string
        createdTs:
          type: integer
        creatorID:
          type: integer
        id:
          type: integer
        pinned:
          description: Composed fields
          type: boolean
        relationList:
          type: array
          items:
            $ref: '#/components/schemas/store.MemoRelation'
        resourceIDList:
          type: array
          items:
            type: integer
        rowStatus:
          description: Standard fields
          allOf:
            - $ref: '#/components/schemas/store.RowStatus'
        updatedTs:
          type: integer
        visibility:
          $ref: '#/components/schemas/store.Visibility'
    store.MemoRelation:
      type: object
      properties:
        memoID:
          type: integer
        relatedMemoID:
          type: integer
        type:
          $ref: '#/components/schemas/store.MemoRelationType'
    store.MemoRelationType:
      type: string
      enum:
        - REFERENCE
        - ADDITIONAL
      x-enum-varnames:
        - MemoRelationReference
        - MemoRelationAdditional
    store.Resource:
      type: object
      properties:
        blob:
          type: array
          items:
            type: integer
        createdTs:
          type: integer
        creatorID:
          description: Standard fields
          type: integer
        externalLink:
          type: string
        filename:
          description: Domain specific fields
          type: string
        id:
          type: integer
        internalPath:
          type: string
        memoID:
          type: integer
        size:
          type: integer
        type:
          type: string
        updatedTs:
          type: integer
    store.Role:
      type: string
      enum:
        - HOST
        - ADMIN
        - USER
      x-enum-varnames:
        - RoleHost
        - RoleAdmin
        - RoleUser
    store.RowStatus:
      type: string
      enum:
        - NORMAL
        - ARCHIVED
      x-enum-varnames:
        - Normal
        - Archived
    store.Storage:
      type: object
      properties:
        config:
          type: string
        id:
          type: integer
        name:
          type: string
        type:
          type: string
    store.SystemSetting:
      type: object
      properties:
        description:
          type: string
        name:
          type: string
        value:
          type: string
    store.User:
      type: object
      properties:
        avatarURL:
          type: string
        createdTs:
          type: integer
        email:
          type: string
        id:
          type: integer
        nickname:
          type: string
        passwordHash:
          type: string
        role:
          $ref: '#/components/schemas/store.Role'
        rowStatus:
          description: Standard fields
          allOf:
            - $ref: '#/components/schemas/store.RowStatus'
        updatedTs:
          type: integer
        username:
          description: Domain specific fields
          type: string
    store.Visibility:
      type: string
      enum:
        - PUBLIC
        - PROTECTED
        - PRIVATE
      x-enum-varnames:
        - Public
        - Protected
        - Private
    v1.CreateIdentityProviderRequest:
      type: object
      properties:
        config:
          $ref: '#/components/schemas/v1.IdentityProviderConfig'
        identifierFilter:
          type: string
        name:
          type: string
        type:
          $ref: '#/components/schemas/v1.IdentityProviderType'
    v1.CreateMemoRequest:
      type: object
      properties:
        content:
          type: string
        createdTs:
          type: integer
        relationList:
          type: array
          items:
            $ref: '#/components/schemas/v1.UpsertMemoRelationRequest'
        resourceIdList:
          description: Related fields
          type: array
          items:
            type: integer
        visibility:
          description: Domain specific fields
          allOf:
            - $ref: '#/components/schemas/v1.Visibility'
    v1.CreateResourceRequest:
      type: object
      properties:
        externalLink:
          type: string
        filename:
          type: string
        internalPath:
          type: string
        type:
          type: string
    v1.CreateStorageRequest:
      type: object
      properties:
        config:
          $ref: '#/components/schemas/v1.StorageConfig'
        name:
          type: string
        type:
          $ref: '#/components/schemas/v1.StorageType'
    v1.CreateUserRequest:
      type: object
      properties:
        email:
          type: string
        nickname:
          type: string
        password:
          type: string
        role:
          $ref: '#/components/schemas/v1.Role'
        username:
          type: string
    v1.CustomizedProfile:
      type: object
      properties:
        appearance:
          description: Appearance is the server default appearance.
          type: string
        description:
          description: Description is the server description.
          type: string
        externalUrl:
          description: >-
            ExternalURL is the external url of server. e.g.
            https://usermemos.com
          type: string
        locale:
          description: Locale is the server default locale.
          type: string
        logoUrl:
          description: LogoURL is the url of logo image.
          type: string
        name:
          description: Name is the server name, default is `memos`
          type: string
    v1.DeleteTagRequest:
      type: object
      properties:
        name:
          type: string
    v1.FieldMapping:
      type: object
      properties:
        displayName:
          type: string
        email:
          type: string
        identifier:
          type: string
    v1.IdentityProvider:
      type: object
      properties:
        config:
          $ref: '#/components/schemas/v1.IdentityProviderConfig'
        id:
          type: integer
        identifierFilter:
          type: string
        name:
          type: string
        type:
          $ref: '#/components/schemas/v1.IdentityProviderType'
    v1.IdentityProviderConfig:
      type: object
      properties:
        oauth2Config:
          $ref: '#/components/schemas/v1.IdentityProviderOAuth2Config'
    v1.IdentityProviderOAuth2Config:
      type: object
      properties:
        authUrl:
          type: string
        clientId:
          type: string
        clientSecret:
          type: string
        fieldMapping:
          $ref: '#/components/schemas/v1.FieldMapping'
        scopes:
          type: array
          items:
            type: string
        tokenUrl:
          type: string
        userInfoUrl:
          type: string
    v1.IdentityProviderType:
      type: string
      enum:
        - OAUTH2
      x-enum-varnames:
        - IdentityProviderOAuth2Type
    v1.MemoRelationType:
      type: string
      enum:
        - REFERENCE
        - ADDITIONAL
      x-enum-varnames:
        - MemoRelationReference
        - MemoRelationAdditional
    v1.PatchMemoRequest:
      type: object
      properties:
        content:
          description: Domain specific fields
          type: string
        createdTs:
          description: Standard fields
          type: integer
        relationList:
          type: array
          items:
            $ref: '#/components/schemas/v1.UpsertMemoRelationRequest'
        resourceIdList:
          description: Related fields
          type: array
          items:
            type: integer
        rowStatus:
          $ref: '#/components/schemas/v1.RowStatus'
        updatedTs:
          type: integer
        visibility:
          $ref: '#/components/schemas/v1.Visibility'
    v1.Role:
      type: string
      enum:
        - HOST
        - ADMIN
        - USER
      x-enum-varnames:
        - RoleHost
        - RoleAdmin
        - RoleUser
    v1.RowStatus:
      type: string
      enum:
        - NORMAL
        - ARCHIVED
      x-enum-varnames:
        - Normal
        - Archived
    v1.SSOSignIn:
      type: object
      properties:
        code:
          type: string
        identityProviderId:
          type: integer
        redirectUri:
          type: string
    v1.SignIn:
      type: object
      properties:
        password:
          type: string
        username:
          type: string
    v1.SignUp:
      type: object
      properties:
        password:
          type: string
        username:
          type: string
    v1.StorageConfig:
      type: object
      properties:
        s3Config:
          $ref: '#/components/schemas/v1.StorageS3Config'
    v1.StorageS3Config:
      type: object
      properties:
        accessKey:
          type: string
        bucket:
          type: string
        endPoint:
          type: string
        path:
          type: string
        region:
          type: string
        secretKey:
          type: string
        urlPrefix:
          type: string
        urlSuffix:
          type: string
    v1.StorageType:
      type: string
      enum:
        - S3
      x-enum-varnames:
        - StorageS3
    v1.SystemSetting:
      type: object
      properties:
        description:
          type: string
        name:
          $ref: '#/components/schemas/v1.SystemSettingName'
        value:
          description: Value is a JSON string with basic value.
          type: string
    v1.SystemSettingName:
      type: string
      enum:
        - server-id
        - secret-session
        - allow-signup
        - disable-password-login
        - disable-public-memos
        - max-upload-size-mib
        - additional-style
        - additional-script
        - customized-profile
        - storage-service-id
        - local-storage-path
        - telegram-bot-token
        - memo-display-with-updated-ts
        - auto-backup-interval
      x-enum-varnames:
        - SystemSettingServerIDName
        - SystemSettingSecretSessionName
        - SystemSettingAllowSignUpName
        - SystemSettingDisablePasswordLoginName
        - SystemSettingDisablePublicMemosName
        - SystemSettingMaxUploadSizeMiBName
        - SystemSettingAdditionalStyleName
        - SystemSettingAdditionalScriptName
        - SystemSettingCustomizedProfileName
        - SystemSettingStorageServiceIDName
        - SystemSettingLocalStoragePathName
        - SystemSettingTelegramBotTokenName
        - SystemSettingMemoDisplayWithUpdatedTsName
        - SystemSettingAutoBackupIntervalName
    v1.SystemStatus:
      type: object
      properties:
        additionalScript:
          description: Additional script.
          type: string
        additionalStyle:
          description: Additional style.
          type: string
        allowSignUp:
          description: |-
            System settings
            Allow sign up.
          type: boolean
        autoBackupInterval:
          description: Auto Backup Interval.
          type: integer
        customizedProfile:
          description: Customized server profile, including server name and external url.
          allOf:
            - $ref: '#/components/schemas/v1.CustomizedProfile'
        dbSize:
          type: integer
        disablePasswordLogin:
          description: Disable password login.
          type: boolean
        disablePublicMemos:
          description: Disable public memos.
          type: boolean
        host:
          $ref: '#/components/schemas/v1.User'
        localStoragePath:
          description: Local storage path.
          type: string
        maxUploadSizeMiB:
          description: Max upload size.
          type: integer
        memoDisplayWithUpdatedTs:
          description: Memo display with updated timestamp.
          type: boolean
        profile:
          $ref: '#/components/schemas/profile.Profile'
        storageServiceId:
          description: Storage service ID.
          type: integer
    v1.UpdateIdentityProviderRequest:
      type: object
      properties:
        config:
          $ref: '#/components/schemas/v1.IdentityProviderConfig'
        identifierFilter:
          type: string
        name:
          type: string
        type:
          $ref: '#/components/schemas/v1.IdentityProviderType'
    v1.UpdateResourceRequest:
      type: object
      properties:
        filename:
          type: string
    v1.UpdateStorageRequest:
      type: object
      properties:
        config:
          $ref: '#/components/schemas/v1.StorageConfig'
        name:
          type: string
        type:
          $ref: '#/components/schemas/v1.StorageType'
    v1.UpdateUserRequest:
      type: object
      properties:
        avatarUrl:
          type: string
        email:
          type: string
        nickname:
          type: string
        password:
          type: string
        rowStatus:
          $ref: '#/components/schemas/v1.RowStatus'
        username:
          type: string
    v1.UpsertMemoOrganizerRequest:
      type: object
      properties:
        pinned:
          type: boolean
    v1.UpsertMemoRelationRequest:
      type: object
      properties:
        relatedMemoId:
          type: integer
        type:
          $ref: '#/components/schemas/v1.MemoRelationType'
    v1.UpsertSystemSettingRequest:
      type: object
      properties:
        description:
          type: string
        name:
          $ref: '#/components/schemas/v1.SystemSettingName'
        value:
          type: string
    v1.UpsertTagRequest:
      type: object
      properties:
        name:
          type: string
    v1.UpsertUserSettingRequest:
      type: object
      properties:
        key:
          $ref: '#/components/schemas/v1.UserSettingKey'
        value:
          type: string
    v1.User:
      type: object
      properties:
        avatarUrl:
          type: string
        createdTs:
          type: integer
        email:
          type: string
        id:
          type: integer
        nickname:
          type: string
        role:
          $ref: '#/components/schemas/v1.Role'
        rowStatus:
          description: Standard fields
          allOf:
            - $ref: '#/components/schemas/v1.RowStatus'
        updatedTs:
          type: integer
        userSettingList:
          type: array
          items:
            $ref: '#/components/schemas/v1.UserSetting'
        username:
          description: Domain specific fields
          type: string
    v1.UserSetting:
      type: object
      properties:
        key:
          $ref: '#/components/schemas/v1.UserSettingKey'
        userId:
          type: integer
        value:
          type: string
    v1.UserSettingKey:
      type: string
      enum:
        - locale
        - appearance
        - memo-visibility
        - telegram-user-id
      x-enum-varnames:
        - UserSettingLocaleKey
        - UserSettingAppearanceKey
        - UserSettingMemoVisibilityKey
        - UserSettingTelegramUserIDKey
    v1.Visibility:
      type: string
      enum:
        - PUBLIC
        - PROTECTED
        - PRIVATE
      x-enum-varnames:
        - Public
        - Protected
        - Private